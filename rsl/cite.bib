@article{1,
  title={An{\'a}lisis de la transparencia en la elicitaci{\'o}n de requerimientos al combinar historias de usuario y casos de uso},
  author={Cohn Muroy, Dennis Stephen},
  publisher={Pontificia Universidad Cat{\'o}lica del Per{\'u}}
}
@article{2,
  title={Seguimiento de requisitos en proyectos de software basado en el enfoque de pr{\'a}cticas {\'a}giles mediante una aplicaci{\'o}n Web},
  author={Mamani Coaquira, Yonatan},
  year={2014},
  publisher={Universidad Nacional Micaela Bastidas de Apurimac}
}
@article{3,
title = "Leveraging creativity in requirements elicitation within agile software development: A systematic literature review",
journal = "Journal of Systems and Software",
volume = "157",
pages = "110396",
year = "2019",
issn = "0164-1212",
doi = "https://doi.org/10.1016/j.jss.2019.110396",
url = "http://www.sciencedirect.com/science/article/pii/S0164121219301712",
author = "Ainhoa Aldave and Juan M. Vara and David Granada and Esperanza Marcos",
keywords = "Software development, Software project management, Agile methodologies, Requirements elicitation, Creative thinking, Systematic review",
abstract = "Agile approaches tend to focus solely on scoping and simplicity rather than on problem solving and discovery. This hampers the development of innovative solutions. Additionally, little has been said about how to capture and represent the real user needs. To fill this gap, some authors argue in favor of the application of “Creative thinking” for requirements elicitation within agile software development. This synergy between creativeness and agility has arisen as a new means of bringing innovation and flexibility to increasingly demanding software. The aim of the present study is therefore to employ a systematic review to investigate the state-of-the-art of those approaches that leverage creativity in requirements elicitation within Agile Software Development, as well as the benefits, limitations and strength of evidence of these approaches. The review was carried out by following the guidelines proposed by Dr. Kitchenham. The search strategy identified 1451 studies, 17 of which were eventually classified as primary studies. The selected studies contained 13 different and unique proposals. These approaches provide evidence that enhanced creativity in requirements elicitation can be successfully implemented in real software projects. We specifically observed that projects related to user interface development, such as those for mobile or web applications, are good candidates for the use of these approaches. We have also found that agile methodologies such as Scrum, Extreme Programming or methodologies based on rapid modelling are preferred when introducing creativity into requirements elicitation. Despite this being a new research field, there is a mixture of techniques, tools and processes that have already been and are currently being successfully tested in industry. Finally, we have found that, although creativity is an important ingredient with which to bring about innovation, it is not always sufficient to generate new requirements because this needs to be followed by user engagement and a specific context in which proper conditions, such as flexibility, time or resources, have to be met."
}
@article{4,
title = "Understanding software developers' cognition in agile requirements engineering",
journal = "Science of Computer Programming",
volume = "178",
pages = "1 - 19",
year = "2019",
issn = "0167-6423",
doi = "https://doi.org/10.1016/j.scico.2019.03.005",
url = "http://www.sciencedirect.com/science/article/pii/S0167642318302764",
author = "Jingdong Jia and Xiaoying Yang and Rong Zhang and Xi Liu",
keywords = "Agile requirements engineering, User story, Cognitive representation style, Cognitive interaction pattern",
abstract = "During agile requirements engineering, developers need to assimilate and transform the original requirements information into system functions in the form of user stories. Obviously, this is a challenging cognition-based process, in which developers' cognition plays a key role. However, prior research has not explored developers' cognition during the process. The purpose of this study is to investigate and understand developers' cognitive representation styles and interaction patterns in agile requirements. A classification of developers' cognitive representation styles and interaction patterns was first proposed based on literature review. Then, an empirical research was conducted in a capstone software engineering course. Students were playing the role of developers and engaging in agile software development during this course, so their conversation about splitting and defining user stories was recorded and analyzed to examine developers' cognition via a content analysis method. The results show that, even when facing requirements analysis, developers tend to exhibit a technology-oriented cognitive representation style. Additionally, developers have more cognitive difficulty in determining activity and granularity than the role and business value of a user story. Developers also exhibit a preference for cognitive interaction pattern; assertion, comment, and two question-patterns are the major four patterns in our paper rather than information sharing, which was considered a major pattern in previous research. This paper contributes to our understanding of developers' cognition, further predicting and guiding developers' behaviors toward achieving good quality requirements analysis."
}
@article{5,
author = {Bhatti, Shahid Nazir and Usman, Maria and Jadi, Amr A.},
title = {Validation to the Requirement Elicitation Framework via Metrics},
year = {2015},
issue_date = {September 2015},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {40},
number = {5},
issn = {0163-5948},
url = {https://doi.org/10.1145/2815021.2815031},
doi = {10.1145/2815021.2815031},
journal = {SIGSOFT Softw. Eng. Notes},
month = sep,
pages = {1–7},
numpages = {7},
keywords = {Functional Requirement (FR), Verification and Validation (V & V), Requirement Elicitation (RE), Non Functional Requirement (NFR)}
}
@article{6,
title = "Integrated product service offerings – Challenges in setting requirements",
journal = "Journal of Cleaner Production",
volume = "201",
pages = "879 - 887",
year = "2018",
issn = "0959-6526",
doi = "https://doi.org/10.1016/j.jclepro.2018.08.090",
url = "http://www.sciencedirect.com/science/article/pii/S0959652618324326",
author = "Sara Nilsson and Erik Sundin and Mattias Lindahl",
keywords = "Requirements engineering, Integrated product service engineering (IPSE), Eco-design, Product service system (PSS), Systems engineering",
abstract = "The objective of this paper is to explore what challenges exist when setting requirements for an Integrated Product Service Offering (IPSO). An IPSO, sometimes called Product Service System, is a concept with increased interest from manufacturing companies. It consists of a combination of products and services that, based on a life cycle perspective, have been integrated to fit targeted customer needs. In order to achieve a successful IPSO, it is important to collect aspects from many actors, something which sometimes is challenging for companies moving towards providing IPSOs. The four challenges found when setting requirements in IPSO development are; identification and inclusion of relevant aspects from relevant actors throughout the IPSO’s life cycle, understanding of the underlying aspects for all requirements for all elements of the offering, prioritization of requirements, and the difficulty to track how requirements affect each other between different elements in the IPSO. The methodology used to find these challenges was a combination of a structured literature review and an interview study at three manufacturing companies moving towards providing IPSOs."
}
@article{7,
title = "A systematic review on the relationship between user involvement and system success",
journal = "Information and Software Technology",
volume = "58",
pages = "148 - 169",
year = "2015",
issn = "0950-5849",
doi = "https://doi.org/10.1016/j.infsof.2014.06.011",
url = "http://www.sciencedirect.com/science/article/pii/S0950584914001505",
author = "Muneera Bano and Didar Zowghi",
keywords = "User involvement, Software development, Systematic Literature Review",
abstract = "Context
For more than four decades it has been intuitively accepted that user involvement (UI) during system development lifecycle leads to system success. However when the researchers have evaluated the user involvement and system success (UI-SS) relationship empirically, the results were not always positive.
Objective
Our objective was to explore the UI-SS relationship by synthesizing the results of all the studies that have empirically investigated this complex phenomenon.
Method
We performed a Systematic Literature Review (SLR) following the steps provided in the guidelines of Evidence Based Software Engineering. From the resulting studies we extracted data to answer our 9 research questions related to the UI-SS relationship, identification of users, perspectives of UI, benefits, problems and challenges of UI, degree and level of UI, relevance of stages of software development lifecycle (SDLC) and the research method employed on the UI-SS relationship.
Results
Our systematic review resulted in selecting 87 empirical studies published during the period 1980–2012. Among 87 studies reviewed, 52 reported that UI positively contributes to system success, 12 suggested a negative contribution and 23 were uncertain. The UI-SS relationship is neither direct nor binary, and there are various confounding factors that play their role. The identification of users, their degree/level of involvement, stage of SDLC for UI, and choice of research method have been claimed to have impact on the UI-SS relationship. However, there is not sufficient empirical evidence available to support these claims.
Conclusion
Our results have revealed that UI does contribute positively to system success. But it is a double edged sword and if not managed carefully it may cause more problems than benefits. Based on the analysis of 87 studies, we were able to identify factors for effective management of UI alluding to the causes for inconsistency in the results of published literature."
}
@incollection{8,
title = "Chapter 7 - “Filling in the blanks”: A way to improve requirements management for better estimates",
editor = "Ivan Mistrik and Richard Soley and Nour Ali and John Grundy and Bedir Tekinerdogan",
booktitle = "Software Quality Assurance",
publisher = "Morgan Kaufmann",
address = "Boston",
pages = "151 - 176",
year = "2016",
isbn = "978-0-12-802301-3",
doi = "https://doi.org/10.1016/B978-0-12-802301-3.00007-7",
url = "http://www.sciencedirect.com/science/article/pii/B9780128023013000077",
author = "Luigi Buglione and Alain Abran and Maya Daneva and Andrea Herrmann",
keywords = "Requirements elicitation, QFD, QFD, scope management, empirical evaluation, implicit requirements, portability",
abstract = "Poor requirements management is often detrimental to estimation of project effort, duration, and costs. Various problems in eliciting and specifying requirements during estimation, such as ambiguous requirements at various levels of granularity and limited attention to nonfunctional requirements, lead to underestimates or estimation error larger than expected. To address these issues, we propose a “fill in the blanks” solution based on a tailoring of the Quality Function Deployment technique we name QF2D (Quality Factor through Quality Function Deployment), which utilizes the latest ISO standards and empirical evidence from industry practices. More specifically, QF2D focuses on requirements based on measurable entities (e.g., organization, project, resources, process, product levels). This chapter illustrates the application of the proposed solution to portability, one of the ISO 25010 characteristics. It also includes a discussion of the approach including implications for research and practice, as well as a sample calculation to illustrate how the technique works to provide added value."
}
@article{9,
title = "REASSURE: Requirements elicitation for adaptive socio-technical systems using repertory grid",
journal = "Information and Software Technology",
volume = "87",
pages = "160 - 179",
year = "2017",
issn = "0950-5849",
doi = "https://doi.org/10.1016/j.infsof.2017.03.004",
url = "http://www.sciencedirect.com/science/article/pii/S095058491730229X",
author = "Sangeeta Dey and Seok-Won Lee",
keywords = "Requirements elicitation, Adaptive systems, Socio-technical systems, Repertory grid",
abstract = "Context
Socio-technical systems are expected to understand the dynamics of the execution environment and behave accordingly. Significant work has been done on formalizing and modeling requirements of such adaptive systems. However, not enough attention is paid on eliciting requirements from users and introducing flexibility in the system behavior at an early phase of requirements engineering. Most of the work is based on an assumption that general users’ cognitive level would be able to support the inherent complexity of variability acquisition.
Objective
Our main focus is on providing help to the users with ordinary cognitive level to express their expectations from the complex system considering various contexts. This work also helps the designers to explore the design variability based on the general users’ preferences.
Method
We explore the idea of using a cognitive technique Repertory Grid (RG) to acquire knowledge from users and experts along multiple dimensions of problem and design space. We propose REASSURE methodology which guides requirements engineers to explore the intentional and design variability in an organized way. We also provide a tool support to analyze the knowledge captured in multiple repertory grid files and detect potential conflicts in the intentional variability. Finally, we evaluate the proposed idea by performing an empirical study using smart home system domain.
Results
The result of our study shows that a greater number of requirements can be elicited after applying our approach. With the help of the provided tool support, it is even possible to detect a greater number of conflicts in user’s requirements than the traditional practices.
Conclusion
We envision RG as a technique to filter design options based on the intentional variability in various contexts. The promising results of empirical study open up new research questions: “how to elicit requirements from multiple stakeholders and reach consensus for multi-dimensional problem domain”."
}
@article{10,
title = "A systematic review of requirements change management",
journal = "Information and Software Technology",
volume = "93",
pages = "163 - 185",
year = "2018",
issn = "0950-5849",
doi = "https://doi.org/10.1016/j.infsof.2017.09.004",
url = "http://www.sciencedirect.com/science/article/pii/S0950584917304664",
author = "Shalinka Jayatilleke and Richard Lai",
keywords = "Requirements change management, Agile, Systematic review",
abstract = "Context
Software requirements are often not set in concrete at the start of a software development project; and requirements changes become necessary and sometimes inevitable due to changes in customer requirements and changes in business rules and operating environments; hence, requirements development, which includes requirements changes, is a part of a software process. Previous work has shown that failing to manage software requirements changes well is a main contributor to project failure. Given the importance of the subject, there's a plethora of research work that discuss the management of requirements change in various directions, ways and means. An examination of these works suggests that there's a room for improvement.
Objective
In this paper, we present a systematic review of research in Requirements Change Management (RCM) as reported in the literature.
Method
We use a systematic review method to answer four key research questions related to requirements change management. The questions are: (1) What are the causes of requirements changes? (2) What processes are used for requirements change management? (3) What techniques are used for requirements change management? and (4) How do organizations make decisions regarding requirements changes? These questions are aimed at studying the various directions in the field of requirements change management and at providing suggestions for future research work.
Results
The four questions were answered; and the strengths and weaknesses of existing techniques for RCM were identified.
Conclusions
This paper has provided information about the current state-of-the-art techniques and practices for RCM and the research gaps in existing work. Benefits, risks and difficulties associated with RCM are also made available to software practitioners who will be in a position of making better decisions on activities related to RCM. Better decisions will lead to better planning which will increase the chance of project success."
}

@article{11,
title = "Evaluating different i*-based approaches for selecting functional requirements while balancing and optimizing non-functional requirements: A controlled experiment",
journal = "Information and Software Technology",
volume = "106",
pages = "68 - 84",
year = "2019",
issn = "0950-5849",
doi = "https://doi.org/10.1016/j.infsof.2018.09.004",
url = "http://www.sciencedirect.com/science/article/pii/S0950584917300770",
author = "Jose Zubcoff and Irene Garrigós and Sven Casteleyn and Jose-Norberto Mazón and Jose-Alfonso Aguilar and Francisco Gomariz-Castillo",
keywords = "Controlled experiment, I*, Requirements engineering, Pareto efficiency",
abstract = "Context
A relevant question in requirements engineering is which set of functional requirements (FR) to prioritize and implement, while keeping non-functional requirements (NFR) balanced and optimized.
Objective
We aim to provide empirical evidence that requirement engineers may perform better at the task of selecting FRs while optimizing and balancing NFRs using an alternative (automated) i* post-processed model, compared to the original i* model.
Method
We performed a controlled experiment, designed to compare the original i* graphical notation, with our post-processed i* visualizations based on Pareto efficiency (a tabular and a radar chart visualization). Our experiment consisted of solving different exercises of various complexity for selecting FRs while balancing NFR. We considered the efficiency (time spent to correctly answer exercises), and the effectiveness (regarding time: time spent to solve exercises, independent of correctness; and regarding correctness of the answer, independent of time).
Results
The efficiency analysis shows it is 3.51 times more likely to solve exercises correctly with our tabular and radar chart visualizations than with i*. Actually, i* was the most time-consuming (effectiveness regarding time), had a lower number of correct answers (effectiveness regarding correctness), and was affected by complexity. Visual or textual preference of the subjects had no effect on the score. Beginners took more time to solve exercises than experts if i* is used (no distinction if our Pareto-based visualizations are used).
Conclusion
For complex model instances, the Pareto front based tabular visualization results in more correct answers, compared to radar chart visualization. When we consider effectiveness regarding time, the i* graphical notation is the most time consuming visualization, independent of the complexity of the exercise. Finally, regarding efficiency, subjects consume less time when using radar chart visualization than tabular visualization, and even more so compared to the original i* graphical notation."
}
@article{12,
title = "Automated business rules and requirements to enrich product-centric information",
journal = "Computers in Industry",
volume = "104",
pages = "22 - 33",
year = "2019",
issn = "0166-3615",
doi = "https://doi.org/10.1016/j.compind.2018.10.001",
url = "http://www.sciencedirect.com/science/article/pii/S0166361518301477",
author = "Virginie Fortineau and Thomas Paviot and Samir Lamouri",
keywords = "Business rule, Requirements, Ontology, PLM, BIM",
abstract = "Current PLM or BIM based information systems suffer from a lack of checking components for business rules. One reason is the misunderstanding of the role and nature of business rules, and how they should be treated in a product-centric information system. This paper intends to provide both a process and a related model to build such a component and enrich future systems. Rules and requirements process management enables the unambiguous formalization of implicit knowledge contained in business rules, generally expressed in easily understandable language, and leads to the formal expression of requirements. In this paper, the requirements are considered a consequence of the application of a business rule. A conceptual model is then introduced, called DALTON (DAta Linked Through Occurrences Network), which supports this process. In this ontology, concepts and product data, coming for instance from an existing product database, are represented using instances and occurrences, connected together with triples built from business rules and requirements according to previous management processes. An experiment involving a set of SWRL rules is conducted in the Protégé environment that validates the model and the process."
}

@article{13,
title = "A semi-automated approach for generating natural language requirements documents based on business process models",
journal = "Information and Software Technology",
volume = "93",
pages = "14 - 29",
year = "2018",
issn = "0950-5849",
doi = "https://doi.org/10.1016/j.infsof.2017.08.009",
url = "http://www.sciencedirect.com/science/article/pii/S0950584917302069",
author = "Banu Aysolmaz and Henrik Leopold and Hajo A. Reijers and Onur Demirörs",
keywords = "Requirements elicitation, Business process model, Natural language generation",
abstract = "Context: The analysis of requirements for business-related software systems is often supported by using business process models. However, the final requirements are typically still specified in natural language. This means that the knowledge captured in process models must be consistently transferred to the specified requirements. Possible inconsistencies between process models and requirements represent a serious threat for the successful development of the software system and may require the repetition of process analysis activities. Objective: The objective of this paper is to address the problem of inconsistency between process models and natural language requirements in the context of software development. Method: We define a semi-automated approach that consists of a process model-based procedure for capturing execution-related data in requirements models and an algorithm that takes these models as input for generating natural language requirements. We evaluated our approach in the context of a multiple case study with three organizations and a total of 13 software development projects. Results: We found that our approach can successfully generate well-readable requirements, which do not only positively contribute to consistency, but also to the completeness and maintainability of requirements. The practical use of our approach to identify a suitable subcontractor on the market in 11 of the 13 projects further highlights the practical value of our approach. Conclusion: Our approach provides a structured way to obtain high-quality requirements documents from process models and to maintain textual and visual representations of requirements in a consistent way."
}
@INPROCEEDINGS{14,
  author={N. {Unkelos-Shpigel} and I. {Hadar}},
  booktitle={2015 IEEE Fifth International Workshop on Empirical Requirements Engineering (EmpiRE)}, 
  title={Inviting everyone to play: Gamifying collaborative requirements engineering}, 
  year={2015},
  volume={},
  number={},
  pages={13-16},
}
@inproceedings{15,
author = {Elmoniem, Mohamed A. Abd and Nasr, Eman S. and Gheith, Mervat H.},
title = {A Requirements Elicitation Tool for Cloud-Based ERP Software Product Line},
year = {2017},
isbn = {9781450355124},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3178298.3178300},
doi = {10.1145/3178298.3178300},
booktitle = {Proceedings of the 3rd Africa and Middle East Conference on Software Engineering},
pages = {1–6},
numpages = {6},
keywords = {feature model, form-based model, SaaS SPLs, requirements engineering tool, Cloud SPLs, SaaS ERP, extended feature model, mapping functional requirements, requirements engineering, ERP, SaaS ERP tool, software product line},
location = {Cairo, Egypt},
series = {AMECSE ’17}
}
@article{16,
author = {Liu, Changsong},
title = {An Intelligent Planning Technique-Based Software Requirement Analysis},
year = {2016},
issue_date = {January 2016},
publisher = {Inderscience Publishers},
address = {Geneva 15, CHE},
volume = {13},
number = {3},
issn = {1742-7185},
url = {https://doi.org/10.1504/IJCSE.2016.078934},
doi = {10.1504/IJCSE.2016.078934},
journal = {Int. J. Comput. Sci. Eng.},
month = jan,
pages = {285–295},
numpages = {11},
keywords = {QoS, machine learning, software requirements analysis, software engineering, intelligent planning, quality of service}
}
@incollection{17,
title = "Chapter 1 - Requirements and Requirements Engineering∗∗This chapter serves to deliver general background knowledge about requirements and requirements engineering.",
editor = "Zhi Jin",
booktitle = "Environment Modeling-Based Requirements Engineering for Software Intensive Systems",
publisher = "Morgan Kaufmann",
address = "Oxford",
pages = "3 - 11",
year = "2018",
isbn = "978-0-12-801954-2",
doi = "https://doi.org/10.1016/B978-0-12-801954-2.00001-7",
url = "http://www.sciencedirect.com/science/article/pii/B9780128019542000017",
author = "Zhi Jin",
keywords = "As-is system, Function point requirements, Problem, Solution, System requirements, To-be system",
abstract = "Requirements engineering refers to the process of defining, documenting, and maintaining requirements statements. Correct system development depends on a precise, correct, and complete system description or specification. How to obtain requirements statements and produce a correct and complete system specification is the main task of requirements engineering. This chapter explores the three dimensions of the requirements engineering: specifications, representation, and agreement among stakeholders."
}
@article{18,
title = "Enhancing requirements engineering for patient registry software systems with evidence-based components",
journal = "Journal of Biomedical Informatics",
volume = "71",
pages = "147 - 153",
year = "2017",
issn = "1532-0464",
doi = "https://doi.org/10.1016/j.jbi.2017.05.013",
url = "http://www.sciencedirect.com/science/article/pii/S1532046417301090",
author = "Doris Lindoerfer and Ulrich Mansmann",
keywords = "Checklist, Patient registry software system, Technical requirements, Evidence-based requirements engineering",
abstract = "Introduction
Patient registries are instrumental for medical research. Often their structures are complex and their implementations use composite software systems to meet the wide spectrum of challenges. Commercial and open-source systems are available for registry implementation, but many research groups develop their own systems. Methodological approaches in the selection of software as well as the construction of proprietary systems are needed. We propose an evidence-based checklist, summarizing essential items for patient registry software systems (CIPROS), to accelerate the requirements engineering process.
Methods
Requirements engineering activities for software systems follow traditional software requirements elicitation methods, general software requirements specification (SRS) templates, and standards. We performed a multistep procedure to develop a specific evidence-based CIPROS checklist: (1) A systematic literature review to build a comprehensive collection of technical concepts, (2) a qualitative content analysis to define a catalogue of relevant criteria, and (3) a checklist to construct a minimal appraisal standard.
Results
CIPROS is based on 64 publications and covers twelve sections with a total of 72 items. CIPROS also defines software requirements. Comparing CIPROS with traditional software requirements elicitation methods, SRS templates and standards show a broad consensus but differences in issues regarding registry-specific aspects.
Discussion
Using an evidence-based approach to requirements engineering for registry software adds aspects to the traditional methods and accelerates the software engineering process for registry software. The method we used to construct CIPROS serves as a potential template for creating evidence-based checklists in other fields.
Conclusion
The CIPROS list supports developers in assessing requirements for existing systems and formulating requirements for their own systems, while strengthening the reporting of patient registry software system descriptions. It may be a first step to create standards for patient registry software system assessments."
}

@article{19,
title = "A comparative study of software tools for user story management",
journal = "Information and Software Technology",
volume = "57",
pages = "352 - 368",
year = "2015",
issn = "0950-5849",
doi = "https://doi.org/10.1016/j.infsof.2014.05.012",
url = "http://www.sciencedirect.com/science/article/pii/S0950584914001293",
author = "Sonja Dimitrijević and Jelena Jovanović and Vladan Devedžić",
keywords = "Requirements engineering, Agile practices, User story management, Software support",
abstract = "Context
User stories have become widely accepted in agile software development. Consequently, a great number of software tools that provide, inter alia, support for practices based on user stories have emerged in recent years. These tools may have different features and focus in terms of support for agile requirements engineering (RE) concepts and practices.
Objective
The present study aims to provide a deep insight into the current capabilities and future trends of software support for agile RE practices based on user stories.
Method
A comparative qualitative study of a set of agile software tools has been conducted according to the following criteria: coverage of the key functional requirements, support for basic agile RE concepts and practices, and user satisfaction with the tool. The criteria for tool selection were: diversity of software tools, high rating on the user-stories community Web site (http://www.userstories.com), and availability for review.
Results
The results show a generally good coverage of key functional requirements related to management of user stories and epics, high-level release planning and low-level iteration planning. On the other hand, user-role modeling and persona support have not been addressed at all, and it has been found that requirements for acceptance testing support were completely covered by only one tool. More importantly, the study has revealed significant differences in the way different tools support agile RE concepts and practices (if at all). Finally, qualitative analysis of user reviews has demonstrated that practitioners prefer tools that are easy to set up, easy to learn, easy to use, and easy to customize, over more sophisticated but simultaneously more demanding tools.
Conclusion
Although the progress that has been made since the inception of these tools is quite clear, there is still room for improvements in terms of support for various agile RE practices within a specific agile process."
}
@article{20,
title = "Grounded requirements engineering: An approach to use case driven requirements engineering",
journal = "Journal of Systems and Software",
volume = "117",
pages = "645 - 657",
year = "2016",
issn = "0164-1212",
doi = "https://doi.org/10.1016/j.jss.2015.10.024",
url = "http://www.sciencedirect.com/science/article/pii/S0164121215002277",
author = "David Würfel and Rainer Lutz and Stephan Diehl",
keywords = "Software engineering, Requirements, Grounded Theory",
abstract = "Requirements engineering produces specifications of the needs or conditions to meet for a software product. These specifications may be vague and ungrounded, i.e. the relation of the requirements to the observations they are derived from may be unclear or not documented. Furthermore, stakeholders may be influenced by solutions of existing software without knowing if these actually suit the software to be developed. To cope with the above issues, it is important to understand the complete task, before designing a software system to support the task. Thus, we developed a method called Grounded Requirements Engineering (GRE) that leverages the Grounded Theory method to observe and analyze processes and user activities in the real world. GRE is an iterative process consisting of two steps. First, Grounded Theory methods are used to analyze user experiments or interviews. Second, the resulting abstract descriptions of the user behavior are transferred into use cases. GRE produces comprehensible and grounded requirements for the software system to be built, i.e. the requirements are traceable back to their origins. In this paper, we provide an elaborate description of the GRE method and illustrate it by applying it to derive requirements for an interactive software tool for model merging. The development of this tool both served as a basis for the design of GRE as well as to test it."
}
@article{21,
title = "Early knowledge organization assisted by aspects",
journal = "Science of Computer Programming",
volume = "121",
pages = "34 - 54",
year = "2016",
note = "Special Issue on Knowledge-based Software Engineering",
issn = "0167-6423",
doi = "https://doi.org/10.1016/j.scico.2015.07.007",
url = "http://www.sciencedirect.com/science/article/pii/S0167642315001410",
author = "Eduardo Barra and Jorge Morato",
keywords = "Advanced separation of concerns, Aspect oriented programming, Ontologies, Early aspects, Requirements engineering",
abstract = "Throughout the lifecycle of software products, changes arise. The repercussions of these changes increase in more advanced stages of the development process. The aspect-oriented proposal is a software development paradigm that provides principles to manage changes. However, the current proposals for the development of the early stages of software do not provide an effective means for functional changes and updates. This paper presents a knowledge modeling methodology in the aspect-oriented context focused on the early stages of the software development. This methodology aims to ease the software evolution through a standardized knowledge representation, a multidimensional organization, and an appropriate advanced separation of concerns. The proposal of a conceptual modeling of early-aspect provides the means for an organization of multidimensional knowledge. The use of ontological techniques under the principles of knowledge-engineering allows specification of early knowledge. This paper presents a case study developed using the methodology and is used as a base to evaluate the methodology, comparing the efficiency in the changes against classic approaches. The results show that it is possible to ease the changes with the proposal presented in this paper."
}
@article{22,
title = "Automated design of multi-layered web information systems",
journal = "Journal of Systems and Software",
volume = "117",
pages = "612 - 637",
year = "2016",
issn = "0164-1212",
doi = "https://doi.org/10.1016/j.jss.2016.04.060",
url = "http://www.sciencedirect.com/science/article/pii/S0164121216300358",
author = "Fábio Paulo Basso and Raquel Mainardi Pillat and Toacy Cavalcante Oliveira and Fabricia Roos-Frantz and Rafael Z. Frantz",
keywords = "Model-driven web engineering, Rapid application prototype, Domain-specific language, Prototyping, Automated design, Mockup, Experience report",
abstract = "In the development of web information systems, design tasks are commonly used in approaches for Model-Driven Web Engineering (MDWE) to represent models. To generate fully implemented prototypes, these models require a rich representation of the semantics for actions (e.g., database persistence operations). In the development of some use case scenarios for the multi-layered development of web information systems, these design tasks may consume weeks of work even for experienced designers. The literature pointed out that the impossibility for executing a software project with short iterations hampers the adoption of some approaches for design in some contexts, such as start-up companies. A possible solution to introduce design tasks in short iterations is the use of automated design techniques, which assist the production of models by means of transformation tasks and refinements. This paper details our methodology for MDWE, which is supported by automated design techniques strictly associated with use case patterns of type CRUD. The novelty relies on iterations that are possible for execution with short time-scales. This is a benefit from automated design techniques not observed in MDWE approaches based on manual design tasks. We also report on previous experiences and address open questions relevant for the theory and practice of MDWE."
}
@incollection{23,
title = "10 - Requirement Management",
editor = "Jean-Louis Boulanger",
booktitle = "Certifiable Software Applications 1",
publisher = "Elsevier",
pages = "239 - 282",
year = "2016",
isbn = "978-1-78548-117-8",
doi = "https://doi.org/10.1016/B978-1-78548-117-8.50010-6",
url = "http://www.sciencedirect.com/science/article/pii/B9781785481178500106",
author = "Jean-Louis Boulanger",
keywords = "Acquisition phase, Change management, Elicitation of requirements, Implementation, Requirement, Specification, Tools, Traceability, Verification and validation",
abstract = "Abstract:
Requirements engineering is a need that appears in all industry standards (aerospace, automotive, railways, nuclear, electrical equipment, etc.). However, one difficulty is that no industry standards define what a requirement is. Industry standards introduce the concept of traceability (connection between various elements) and the concept of level (in aeronautics we have the concept of LLR and HLR for Low Level Requirement and High Level Requirement)."
}
@article{24,
author = {\'{A}guila, Isabel M. and Sagrado, Jos\'{e}},
title = {Bayesian Networks for Enhancement of Requirements Engineering: A Literature Review},
year = {2016},
issue_date = {November  2016},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {21},
number = {4},
issn = {0947-3602},
url = {https://doi.org/10.1007/s00766-015-0225-3},
doi = {10.1007/s00766-015-0225-3},
journal = {Requir. Eng.},
month = nov,
pages = {461–480},
numpages = {20},
keywords = {Requirements engineering, Literature review, Bayesian networks}
}
@article{25,
title = "A novel data-driven graph-based requirement elicitation framework in the smart product-service system context",
journal = "Advanced Engineering Informatics",
volume = "42",
pages = "100983",
year = "2019",
issn = "1474-0346",
doi = "https://doi.org/10.1016/j.aei.2019.100983",
url = "http://www.sciencedirect.com/science/article/pii/S1474034619305567",
author = "Zuoxu Wang and Chun-Hsien Chen and Pai Zheng and Xinyu Li and Li Pheng Khoo",
keywords = "Requirement elicitation, Product-service systems, Knowledge management, Data-driven design, Value co-creation",
abstract = "Nowadays, industrial companies are facing ever-increasing challenges to generate new value-in-use and maintain their high competitiveness in the market. With the rapid development of Information and Communication Technology (ICT), IT is embedded in the products themselves, i.e. smart, connected products (SCPs) to generate values. Hence, an emerging value proposition paradigm, smart product-service system (Smart PSS) was introduced, by leveraging both SCPs and its generated services as a solution bundle to meet individual customer needs. Unlike other types of PSS, in Smart PSS, massive user-generated data and product-sensed data are collected during the usage phase, where potential requirements can be elicited readily in a value co-creation manner with context-awareness. Nevertheless, only few scholars discuss any systematic manner to support requirement elicitation in such context. To fill the gaps, this research proposes a novel data-driven graph-based requirement elicitation framework in the Smart PSS, so as to assist engineering/designers make better design improvement or new design concept generation in a closed-loop manner. It underlines the informatics-based approach by integrating heterogeneous data sources into a holistic consideration. Moreover, by leveraging graph-based approach, context-product-service information can be linked by the edges and nodes in-between them to derive reliable requirements. To validate its feasibility and advantages, an illustrative example of smart bicycle design improvement is further adopted. As an explorative study, it is hoped that this work provides useful insights for the requirement elicitation process in today’s smart connected environment."
}
@article{26,
title = "Requirements Elicitation with Extended Goal Graph",
journal = "Procedia Computer Science",
volume = "96",
pages = "1691 - 1700",
year = "2016",
note = "Knowledge-Based and Intelligent Information & Engineering Systems: Proceedings of the 20th International Conference KES-2016",
issn = "1877-0509",
doi = "https://doi.org/10.1016/j.procs.2016.08.217",
url = "http://www.sciencedirect.com/science/article/pii/S1877050916320270",
author = "Noriyuki Kushiro and Takuro Shimizu and Tatsuya Ehira",
keywords = "Support tool for requirements meeting, Extended goal graph, Environment for analyzing progress of requirements meeting",
abstract = "Requirements for a system are often discovered during negotiation process for conflicts among stakeholders, rather than at the time when stakeholders are thinking about their own requirements uncritically in a requirements meeting. Conflicts could be utilized as a driving force to discover significant functional and/or non-functional requirements for the system, by handling conflicts in the requirements meeting appropriately. In this paper, we propose a support tool for discovering conflicts, called as an extended goal graph. We implemented a prototype of the tool and constructed an environment for analyzing requirements meeting. The prototype and the environment were applied to a requirements meeting on improvement of selling area in drugstore. Issues and solutions for practical use of the tool are discussed on the results of feasibility test."
}
@article{27,
title = "Knowledge management in requirement elicitation: Situational methods view",
journal = "Computer Standards & Interfaces",
volume = "56",
pages = "49 - 61",
year = "2018",
issn = "0920-5489",
doi = "https://doi.org/10.1016/j.csi.2017.09.004",
url = "http://www.sciencedirect.com/science/article/pii/S092054891630229X",
author = "Deepti Mishra and Seçil Aydin and Alok Mishra and Sofiya Ostrovska",
keywords = "Knowledge management, Requirement engineering, Situational method engineering, Requirement elicitation",
abstract = "In small-scale software development organizations, software engineers are beginning to realize the significance of adapting software development methods according to project conditions. There is a requirement to proliferate this know-how to other developers, who may be facing the same settings/context, so that they too can benefit from others’ experiences. In this paper, the application of situational method engineering in requirements elicitation phase is investigated. A novel, simple and dynamic web-based tool, Situational Requirement Method System (SRMS), is developed which can aid in conception/formulation, repository, and elicitation/derivation of methods related with this stage. The proposed approach and tool are validated by distributing a questionnaire among software professionals working in large software companies, and making SRMS accessible to them. The results indicate that a majority of the participants finds SRMS useful and provides various suggestions to improve it."
}

@article{28,
title = "Automated Requirements Extraction for Scientific Software",
journal = "Procedia Computer Science",
volume = "51",
pages = "582 - 591",
year = "2015",
note = "International Conference On Computational Science, ICCS 2015",
issn = "1877-0509",
doi = "https://doi.org/10.1016/j.procs.2015.05.326",
url = "http://www.sciencedirect.com/science/article/pii/S1877050915011345",
author = "Yang Li and Emitza Guzman and Konstantina Tsiamoura and Florian Schneider and Bernd Bruegge",
keywords = "Scientific software, Requirements engineering, Natural language processing",
abstract = "Requirements engineering is crucial for software projects, but formal requirements engineering is often ignored in scientific software projects. Scientists do not often see the benefit of di- recting their time and effort towards documenting requirements. Additionally, there is a lack of requirements engineering knowledge amongst scientists who develop software. We aim at helping scientists to easily recover and reuse requirements without acquiring prior requirements engineering knowledge. We apply an automated approach to extract requirements for scientific software from available knowledge sources, such as user manuals and project reports. The ap- proach employs natural language processing techniques to match defined patterns in input text. We have evaluated the approach in three different scientific domains, namely seismology, build- ing performance and computational fluid dynamics. The evaluation results show that 78–97% of the extracted requirement candidates are correctly extracted as early requirements."
}